// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: api/user/v1/user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserExternalAPI_VerificationEmail_FullMethodName    = "/api.user.v1.UserExternalAPI/VerificationEmail"
	UserExternalAPI_VerificationUsername_FullMethodName = "/api.user.v1.UserExternalAPI/VerificationUsername"
	UserExternalAPI_CreateUser_FullMethodName           = "/api.user.v1.UserExternalAPI/CreateUser"
	UserExternalAPI_Login_FullMethodName                = "/api.user.v1.UserExternalAPI/Login"
	UserExternalAPI_Logout_FullMethodName               = "/api.user.v1.UserExternalAPI/Logout"
	UserExternalAPI_GetUser_FullMethodName              = "/api.user.v1.UserExternalAPI/GetUser"
	UserExternalAPI_SearchUsers_FullMethodName          = "/api.user.v1.UserExternalAPI/SearchUsers"
	UserExternalAPI_UpdatePassword_FullMethodName       = "/api.user.v1.UserExternalAPI/UpdatePassword"
	UserExternalAPI_UpdateUser_FullMethodName           = "/api.user.v1.UserExternalAPI/UpdateUser"
	UserExternalAPI_RemoveAvatar_FullMethodName         = "/api.user.v1.UserExternalAPI/RemoveAvatar"
	UserExternalAPI_ListUserAvatar_FullMethodName       = "/api.user.v1.UserExternalAPI/ListUserAvatar"
	UserExternalAPI_GetUsersByIDs_FullMethodName        = "/api.user.v1.UserExternalAPI/GetUsersByIDs"
	UserExternalAPI_AddAvatar_FullMethodName            = "/api.user.v1.UserExternalAPI/AddAvatar"
)

// UserExternalAPIClient is the client API for UserExternalAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// External service API for managing user's information.
type UserExternalAPIClient interface {
	// Verification and exist checking user's email.
	// It should be valid email.
	VerificationEmail(ctx context.Context, in *VerificationEmailRequest, opts ...grpc.CallOption) (*VerificationEmailResponse, error)
	// Verification and exist checking user's name.
	// It should be valid email.
	VerificationUsername(ctx context.Context, in *VerificationUsernameRequest, opts ...grpc.CallOption) (*VerificationUsernameResponse, error)
	// Create user by params.
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// Login by email.
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Logout and remove user session.
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	// Get user's information.
	// If you not send user's id, we will return caller's profile by authorization token.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// Search users by username and full name.
	SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error)
	// Set new password.
	UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error)
	// Update profile.
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// Remove user avatar.
	RemoveAvatar(ctx context.Context, in *RemoveAvatarRequest, opts ...grpc.CallOption) (*RemoveAvatarResponse, error)
	// List user avatar.
	ListUserAvatar(ctx context.Context, in *ListUserAvatarRequest, opts ...grpc.CallOption) (*ListUserAvatarResponse, error)
	// Search users by ids.
	GetUsersByIDs(ctx context.Context, in *GetUsersByIDsRequest, opts ...grpc.CallOption) (*GetUsersByIDsResponse, error)
	// Add avatar to user.
	AddAvatar(ctx context.Context, in *AddAvatarRequest, opts ...grpc.CallOption) (*AddAvatarResponse, error)
}

type userExternalAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewUserExternalAPIClient(cc grpc.ClientConnInterface) UserExternalAPIClient {
	return &userExternalAPIClient{cc}
}

func (c *userExternalAPIClient) VerificationEmail(ctx context.Context, in *VerificationEmailRequest, opts ...grpc.CallOption) (*VerificationEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerificationEmailResponse)
	err := c.cc.Invoke(ctx, UserExternalAPI_VerificationEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userExternalAPIClient) VerificationUsername(ctx context.Context, in *VerificationUsernameRequest, opts ...grpc.CallOption) (*VerificationUsernameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerificationUsernameResponse)
	err := c.cc.Invoke(ctx, UserExternalAPI_VerificationUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userExternalAPIClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, UserExternalAPI_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userExternalAPIClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, UserExternalAPI_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userExternalAPIClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, UserExternalAPI_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userExternalAPIClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, UserExternalAPI_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userExternalAPIClient) SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchUsersResponse)
	err := c.cc.Invoke(ctx, UserExternalAPI_SearchUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userExternalAPIClient) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePasswordResponse)
	err := c.cc.Invoke(ctx, UserExternalAPI_UpdatePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userExternalAPIClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, UserExternalAPI_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userExternalAPIClient) RemoveAvatar(ctx context.Context, in *RemoveAvatarRequest, opts ...grpc.CallOption) (*RemoveAvatarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAvatarResponse)
	err := c.cc.Invoke(ctx, UserExternalAPI_RemoveAvatar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userExternalAPIClient) ListUserAvatar(ctx context.Context, in *ListUserAvatarRequest, opts ...grpc.CallOption) (*ListUserAvatarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserAvatarResponse)
	err := c.cc.Invoke(ctx, UserExternalAPI_ListUserAvatar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userExternalAPIClient) GetUsersByIDs(ctx context.Context, in *GetUsersByIDsRequest, opts ...grpc.CallOption) (*GetUsersByIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersByIDsResponse)
	err := c.cc.Invoke(ctx, UserExternalAPI_GetUsersByIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userExternalAPIClient) AddAvatar(ctx context.Context, in *AddAvatarRequest, opts ...grpc.CallOption) (*AddAvatarResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAvatarResponse)
	err := c.cc.Invoke(ctx, UserExternalAPI_AddAvatar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserExternalAPIServer is the server API for UserExternalAPI service.
// All implementations should embed UnimplementedUserExternalAPIServer
// for forward compatibility.
//
// External service API for managing user's information.
type UserExternalAPIServer interface {
	// Verification and exist checking user's email.
	// It should be valid email.
	VerificationEmail(context.Context, *VerificationEmailRequest) (*VerificationEmailResponse, error)
	// Verification and exist checking user's name.
	// It should be valid email.
	VerificationUsername(context.Context, *VerificationUsernameRequest) (*VerificationUsernameResponse, error)
	// Create user by params.
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// Login by email.
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Logout and remove user session.
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	// Get user's information.
	// If you not send user's id, we will return caller's profile by authorization token.
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// Search users by username and full name.
	SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error)
	// Set new password.
	UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordResponse, error)
	// Update profile.
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// Remove user avatar.
	RemoveAvatar(context.Context, *RemoveAvatarRequest) (*RemoveAvatarResponse, error)
	// List user avatar.
	ListUserAvatar(context.Context, *ListUserAvatarRequest) (*ListUserAvatarResponse, error)
	// Search users by ids.
	GetUsersByIDs(context.Context, *GetUsersByIDsRequest) (*GetUsersByIDsResponse, error)
	// Add avatar to user.
	AddAvatar(context.Context, *AddAvatarRequest) (*AddAvatarResponse, error)
}

// UnimplementedUserExternalAPIServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserExternalAPIServer struct{}

func (UnimplementedUserExternalAPIServer) VerificationEmail(context.Context, *VerificationEmailRequest) (*VerificationEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerificationEmail not implemented")
}
func (UnimplementedUserExternalAPIServer) VerificationUsername(context.Context, *VerificationUsernameRequest) (*VerificationUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerificationUsername not implemented")
}
func (UnimplementedUserExternalAPIServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserExternalAPIServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserExternalAPIServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedUserExternalAPIServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserExternalAPIServer) SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}
func (UnimplementedUserExternalAPIServer) UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedUserExternalAPIServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserExternalAPIServer) RemoveAvatar(context.Context, *RemoveAvatarRequest) (*RemoveAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAvatar not implemented")
}
func (UnimplementedUserExternalAPIServer) ListUserAvatar(context.Context, *ListUserAvatarRequest) (*ListUserAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserAvatar not implemented")
}
func (UnimplementedUserExternalAPIServer) GetUsersByIDs(context.Context, *GetUsersByIDsRequest) (*GetUsersByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByIDs not implemented")
}
func (UnimplementedUserExternalAPIServer) AddAvatar(context.Context, *AddAvatarRequest) (*AddAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAvatar not implemented")
}
func (UnimplementedUserExternalAPIServer) testEmbeddedByValue() {}

// UnsafeUserExternalAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserExternalAPIServer will
// result in compilation errors.
type UnsafeUserExternalAPIServer interface {
	mustEmbedUnimplementedUserExternalAPIServer()
}

func RegisterUserExternalAPIServer(s grpc.ServiceRegistrar, srv UserExternalAPIServer) {
	// If the following call pancis, it indicates UnimplementedUserExternalAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserExternalAPI_ServiceDesc, srv)
}

func _UserExternalAPI_VerificationEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserExternalAPIServer).VerificationEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserExternalAPI_VerificationEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserExternalAPIServer).VerificationEmail(ctx, req.(*VerificationEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserExternalAPI_VerificationUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserExternalAPIServer).VerificationUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserExternalAPI_VerificationUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserExternalAPIServer).VerificationUsername(ctx, req.(*VerificationUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserExternalAPI_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserExternalAPIServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserExternalAPI_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserExternalAPIServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserExternalAPI_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserExternalAPIServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserExternalAPI_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserExternalAPIServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserExternalAPI_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserExternalAPIServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserExternalAPI_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserExternalAPIServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserExternalAPI_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserExternalAPIServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserExternalAPI_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserExternalAPIServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserExternalAPI_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserExternalAPIServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserExternalAPI_SearchUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserExternalAPIServer).SearchUsers(ctx, req.(*SearchUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserExternalAPI_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserExternalAPIServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserExternalAPI_UpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserExternalAPIServer).UpdatePassword(ctx, req.(*UpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserExternalAPI_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserExternalAPIServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserExternalAPI_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserExternalAPIServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserExternalAPI_RemoveAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserExternalAPIServer).RemoveAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserExternalAPI_RemoveAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserExternalAPIServer).RemoveAvatar(ctx, req.(*RemoveAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserExternalAPI_ListUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserExternalAPIServer).ListUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserExternalAPI_ListUserAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserExternalAPIServer).ListUserAvatar(ctx, req.(*ListUserAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserExternalAPI_GetUsersByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserExternalAPIServer).GetUsersByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserExternalAPI_GetUsersByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserExternalAPIServer).GetUsersByIDs(ctx, req.(*GetUsersByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserExternalAPI_AddAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserExternalAPIServer).AddAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserExternalAPI_AddAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserExternalAPIServer).AddAvatar(ctx, req.(*AddAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserExternalAPI_ServiceDesc is the grpc.ServiceDesc for UserExternalAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserExternalAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.v1.UserExternalAPI",
	HandlerType: (*UserExternalAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerificationEmail",
			Handler:    _UserExternalAPI_VerificationEmail_Handler,
		},
		{
			MethodName: "VerificationUsername",
			Handler:    _UserExternalAPI_VerificationUsername_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserExternalAPI_CreateUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserExternalAPI_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _UserExternalAPI_Logout_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserExternalAPI_GetUser_Handler,
		},
		{
			MethodName: "SearchUsers",
			Handler:    _UserExternalAPI_SearchUsers_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _UserExternalAPI_UpdatePassword_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserExternalAPI_UpdateUser_Handler,
		},
		{
			MethodName: "RemoveAvatar",
			Handler:    _UserExternalAPI_RemoveAvatar_Handler,
		},
		{
			MethodName: "ListUserAvatar",
			Handler:    _UserExternalAPI_ListUserAvatar_Handler,
		},
		{
			MethodName: "GetUsersByIDs",
			Handler:    _UserExternalAPI_GetUsersByIDs_Handler,
		},
		{
			MethodName: "AddAvatar",
			Handler:    _UserExternalAPI_AddAvatar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user/v1/user.proto",
}
