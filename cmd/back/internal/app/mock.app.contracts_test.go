// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go
//
// Generated by this command:
//
//	mockgen -source=contracts.go -destination mock.app.contracts_test.go -package app_test
//

// Package app_test is a generated GoMock package.
package app_test

import (
	context "context"
	reflect "reflect"

	app "github.com/ZergsLaw/back-template/cmd/back/internal/app"
	uuid "github.com/gofrs/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
	isgomock struct{}
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// DeleteAvatar mocks base method.
func (m *MockRepo) DeleteAvatar(ctx context.Context, userID, fileID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAvatar", ctx, userID, fileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAvatar indicates an expected call of DeleteAvatar.
func (mr *MockRepoMockRecorder) DeleteAvatar(ctx, userID, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAvatar", reflect.TypeOf((*MockRepo)(nil).DeleteAvatar), ctx, userID, fileID)
}

// FinishTask mocks base method.
func (m *MockRepo) FinishTask(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishTask indicates an expected call of FinishTask.
func (mr *MockRepoMockRecorder) FinishTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishTask", reflect.TypeOf((*MockRepo)(nil).FinishTask), arg0, arg1)
}

// GetAvatar mocks base method.
func (m *MockRepo) GetAvatar(ctx context.Context, fileID uuid.UUID) (*app.AvatarInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatar", ctx, fileID)
	ret0, _ := ret[0].(*app.AvatarInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatar indicates an expected call of GetAvatar.
func (mr *MockRepoMockRecorder) GetAvatar(ctx, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatar", reflect.TypeOf((*MockRepo)(nil).GetAvatar), ctx, fileID)
}

// GetCountAvatars mocks base method.
func (m *MockRepo) GetCountAvatars(ctx context.Context, ownerID uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountAvatars", ctx, ownerID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountAvatars indicates an expected call of GetCountAvatars.
func (mr *MockRepoMockRecorder) GetCountAvatars(ctx, ownerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountAvatars", reflect.TypeOf((*MockRepo)(nil).GetCountAvatars), ctx, ownerID)
}

// ListActualTask mocks base method.
func (m *MockRepo) ListActualTask(arg0 context.Context, arg1 int) ([]app.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActualTask", arg0, arg1)
	ret0, _ := ret[0].([]app.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActualTask indicates an expected call of ListActualTask.
func (mr *MockRepoMockRecorder) ListActualTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActualTask", reflect.TypeOf((*MockRepo)(nil).ListActualTask), arg0, arg1)
}

// ListAvatarByUserID mocks base method.
func (m *MockRepo) ListAvatarByUserID(ctx context.Context, userID uuid.UUID) ([]app.AvatarInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvatarByUserID", ctx, userID)
	ret0, _ := ret[0].([]app.AvatarInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvatarByUserID indicates an expected call of ListAvatarByUserID.
func (mr *MockRepoMockRecorder) ListAvatarByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvatarByUserID", reflect.TypeOf((*MockRepo)(nil).ListAvatarByUserID), ctx, userID)
}

// SaveAvatar mocks base method.
func (m *MockRepo) SaveAvatar(ctx context.Context, fileCache app.AvatarInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAvatar", ctx, fileCache)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAvatar indicates an expected call of SaveAvatar.
func (mr *MockRepoMockRecorder) SaveAvatar(ctx, fileCache any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAvatar", reflect.TypeOf((*MockRepo)(nil).SaveAvatar), ctx, fileCache)
}

// SaveTask mocks base method.
func (m *MockRepo) SaveTask(arg0 context.Context, arg1 app.Task) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTask", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveTask indicates an expected call of SaveTask.
func (mr *MockRepoMockRecorder) SaveTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTask", reflect.TypeOf((*MockRepo)(nil).SaveTask), arg0, arg1)
}

// SearchUsers mocks base method.
func (m *MockRepo) SearchUsers(arg0 context.Context, arg1 app.SearchParams) ([]app.User, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUsers", arg0, arg1)
	ret0, _ := ret[0].([]app.User)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchUsers indicates an expected call of SearchUsers.
func (mr *MockRepoMockRecorder) SearchUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUsers", reflect.TypeOf((*MockRepo)(nil).SearchUsers), arg0, arg1)
}

// Tx mocks base method.
func (m *MockRepo) Tx(ctx context.Context, f func(app.Repo) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tx indicates an expected call of Tx.
func (mr *MockRepoMockRecorder) Tx(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockRepo)(nil).Tx), ctx, f)
}

// UserByEmail mocks base method.
func (m *MockRepo) UserByEmail(arg0 context.Context, arg1 string) (*app.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByEmail", arg0, arg1)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByEmail indicates an expected call of UserByEmail.
func (mr *MockRepoMockRecorder) UserByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByEmail", reflect.TypeOf((*MockRepo)(nil).UserByEmail), arg0, arg1)
}

// UserByID mocks base method.
func (m *MockRepo) UserByID(arg0 context.Context, arg1 uuid.UUID) (*app.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByID", arg0, arg1)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByID indicates an expected call of UserByID.
func (mr *MockRepoMockRecorder) UserByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByID", reflect.TypeOf((*MockRepo)(nil).UserByID), arg0, arg1)
}

// UserByUsername mocks base method.
func (m *MockRepo) UserByUsername(arg0 context.Context, arg1 string) (*app.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByUsername", arg0, arg1)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByUsername indicates an expected call of UserByUsername.
func (mr *MockRepoMockRecorder) UserByUsername(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByUsername", reflect.TypeOf((*MockRepo)(nil).UserByUsername), arg0, arg1)
}

// UserSave mocks base method.
func (m *MockRepo) UserSave(arg0 context.Context, arg1 app.User) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSave", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSave indicates an expected call of UserSave.
func (mr *MockRepoMockRecorder) UserSave(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSave", reflect.TypeOf((*MockRepo)(nil).UserSave), arg0, arg1)
}

// UserUpdate mocks base method.
func (m *MockRepo) UserUpdate(arg0 context.Context, arg1 app.User) (*app.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdate", arg0, arg1)
	ret0, _ := ret[0].(*app.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserUpdate indicates an expected call of UserUpdate.
func (mr *MockRepoMockRecorder) UserUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdate", reflect.TypeOf((*MockRepo)(nil).UserUpdate), arg0, arg1)
}

// UsersByIDs mocks base method.
func (m *MockRepo) UsersByIDs(ctx context.Context, ids []uuid.UUID) ([]app.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersByIDs", ctx, ids)
	ret0, _ := ret[0].([]app.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UsersByIDs indicates an expected call of UsersByIDs.
func (mr *MockRepoMockRecorder) UsersByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersByIDs", reflect.TypeOf((*MockRepo)(nil).UsersByIDs), ctx, ids)
}

// MockFileInfoRepo is a mock of FileInfoRepo interface.
type MockFileInfoRepo struct {
	ctrl     *gomock.Controller
	recorder *MockFileInfoRepoMockRecorder
	isgomock struct{}
}

// MockFileInfoRepoMockRecorder is the mock recorder for MockFileInfoRepo.
type MockFileInfoRepoMockRecorder struct {
	mock *MockFileInfoRepo
}

// NewMockFileInfoRepo creates a new mock instance.
func NewMockFileInfoRepo(ctrl *gomock.Controller) *MockFileInfoRepo {
	mock := &MockFileInfoRepo{ctrl: ctrl}
	mock.recorder = &MockFileInfoRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileInfoRepo) EXPECT() *MockFileInfoRepoMockRecorder {
	return m.recorder
}

// DeleteAvatar mocks base method.
func (m *MockFileInfoRepo) DeleteAvatar(ctx context.Context, userID, fileID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAvatar", ctx, userID, fileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAvatar indicates an expected call of DeleteAvatar.
func (mr *MockFileInfoRepoMockRecorder) DeleteAvatar(ctx, userID, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAvatar", reflect.TypeOf((*MockFileInfoRepo)(nil).DeleteAvatar), ctx, userID, fileID)
}

// GetAvatar mocks base method.
func (m *MockFileInfoRepo) GetAvatar(ctx context.Context, fileID uuid.UUID) (*app.AvatarInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatar", ctx, fileID)
	ret0, _ := ret[0].(*app.AvatarInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvatar indicates an expected call of GetAvatar.
func (mr *MockFileInfoRepoMockRecorder) GetAvatar(ctx, fileID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatar", reflect.TypeOf((*MockFileInfoRepo)(nil).GetAvatar), ctx, fileID)
}

// GetCountAvatars mocks base method.
func (m *MockFileInfoRepo) GetCountAvatars(ctx context.Context, ownerID uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountAvatars", ctx, ownerID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountAvatars indicates an expected call of GetCountAvatars.
func (mr *MockFileInfoRepoMockRecorder) GetCountAvatars(ctx, ownerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountAvatars", reflect.TypeOf((*MockFileInfoRepo)(nil).GetCountAvatars), ctx, ownerID)
}

// ListAvatarByUserID mocks base method.
func (m *MockFileInfoRepo) ListAvatarByUserID(ctx context.Context, userID uuid.UUID) ([]app.AvatarInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvatarByUserID", ctx, userID)
	ret0, _ := ret[0].([]app.AvatarInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvatarByUserID indicates an expected call of ListAvatarByUserID.
func (mr *MockFileInfoRepoMockRecorder) ListAvatarByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvatarByUserID", reflect.TypeOf((*MockFileInfoRepo)(nil).ListAvatarByUserID), ctx, userID)
}

// SaveAvatar mocks base method.
func (m *MockFileInfoRepo) SaveAvatar(ctx context.Context, fileCache app.AvatarInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAvatar", ctx, fileCache)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAvatar indicates an expected call of SaveAvatar.
func (mr *MockFileInfoRepoMockRecorder) SaveAvatar(ctx, fileCache any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAvatar", reflect.TypeOf((*MockFileInfoRepo)(nil).SaveAvatar), ctx, fileCache)
}

// MockFileStore is a mock of FileStore interface.
type MockFileStore struct {
	ctrl     *gomock.Controller
	recorder *MockFileStoreMockRecorder
	isgomock struct{}
}

// MockFileStoreMockRecorder is the mock recorder for MockFileStore.
type MockFileStoreMockRecorder struct {
	mock *MockFileStore
}

// NewMockFileStore creates a new mock instance.
func NewMockFileStore(ctrl *gomock.Controller) *MockFileStore {
	mock := &MockFileStore{ctrl: ctrl}
	mock.recorder = &MockFileStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileStore) EXPECT() *MockFileStoreMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockFileStore) DeleteFile(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileStoreMockRecorder) DeleteFile(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileStore)(nil).DeleteFile), ctx, id)
}

// DownloadFile mocks base method.
func (m *MockFileStore) DownloadFile(ctx context.Context, id uuid.UUID) (*app.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", ctx, id)
	ret0, _ := ret[0].(*app.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockFileStoreMockRecorder) DownloadFile(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockFileStore)(nil).DownloadFile), ctx, id)
}

// UploadFile mocks base method.
func (m *MockFileStore) UploadFile(ctx context.Context, f app.File) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, f)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockFileStoreMockRecorder) UploadFile(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockFileStore)(nil).UploadFile), ctx, f)
}

// MockPasswordHash is a mock of PasswordHash interface.
type MockPasswordHash struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordHashMockRecorder
	isgomock struct{}
}

// MockPasswordHashMockRecorder is the mock recorder for MockPasswordHash.
type MockPasswordHashMockRecorder struct {
	mock *MockPasswordHash
}

// NewMockPasswordHash creates a new mock instance.
func NewMockPasswordHash(ctrl *gomock.Controller) *MockPasswordHash {
	mock := &MockPasswordHash{ctrl: ctrl}
	mock.recorder = &MockPasswordHashMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordHash) EXPECT() *MockPasswordHashMockRecorder {
	return m.recorder
}

// Compare mocks base method.
func (m *MockPasswordHash) Compare(hashedPassword, password []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", hashedPassword, password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Compare indicates an expected call of Compare.
func (mr *MockPasswordHashMockRecorder) Compare(hashedPassword, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*MockPasswordHash)(nil).Compare), hashedPassword, password)
}

// Hashing mocks base method.
func (m *MockPasswordHash) Hashing(password string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hashing", password)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hashing indicates an expected call of Hashing.
func (mr *MockPasswordHashMockRecorder) Hashing(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hashing", reflect.TypeOf((*MockPasswordHash)(nil).Hashing), password)
}

// MockTaskRepo is a mock of TaskRepo interface.
type MockTaskRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepoMockRecorder
	isgomock struct{}
}

// MockTaskRepoMockRecorder is the mock recorder for MockTaskRepo.
type MockTaskRepoMockRecorder struct {
	mock *MockTaskRepo
}

// NewMockTaskRepo creates a new mock instance.
func NewMockTaskRepo(ctrl *gomock.Controller) *MockTaskRepo {
	mock := &MockTaskRepo{ctrl: ctrl}
	mock.recorder = &MockTaskRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepo) EXPECT() *MockTaskRepoMockRecorder {
	return m.recorder
}

// FinishTask mocks base method.
func (m *MockTaskRepo) FinishTask(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishTask indicates an expected call of FinishTask.
func (mr *MockTaskRepoMockRecorder) FinishTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishTask", reflect.TypeOf((*MockTaskRepo)(nil).FinishTask), arg0, arg1)
}

// ListActualTask mocks base method.
func (m *MockTaskRepo) ListActualTask(arg0 context.Context, arg1 int) ([]app.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActualTask", arg0, arg1)
	ret0, _ := ret[0].([]app.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActualTask indicates an expected call of ListActualTask.
func (mr *MockTaskRepoMockRecorder) ListActualTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActualTask", reflect.TypeOf((*MockTaskRepo)(nil).ListActualTask), arg0, arg1)
}

// SaveTask mocks base method.
func (m *MockTaskRepo) SaveTask(arg0 context.Context, arg1 app.Task) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTask", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveTask indicates an expected call of SaveTask.
func (mr *MockTaskRepoMockRecorder) SaveTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTask", reflect.TypeOf((*MockTaskRepo)(nil).SaveTask), arg0, arg1)
}

// MockSessions is a mock of Sessions interface.
type MockSessions struct {
	ctrl     *gomock.Controller
	recorder *MockSessionsMockRecorder
	isgomock struct{}
}

// MockSessionsMockRecorder is the mock recorder for MockSessions.
type MockSessionsMockRecorder struct {
	mock *MockSessions
}

// NewMockSessions creates a new mock instance.
func NewMockSessions(ctrl *gomock.Controller) *MockSessions {
	mock := &MockSessions{ctrl: ctrl}
	mock.recorder = &MockSessionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessions) EXPECT() *MockSessionsMockRecorder {
	return m.recorder
}

// SessionByID mocks base method.
func (m *MockSessions) SessionByID(arg0 context.Context, arg1 uuid.UUID) (*app.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionByID", arg0, arg1)
	ret0, _ := ret[0].(*app.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SessionByID indicates an expected call of SessionByID.
func (mr *MockSessionsMockRecorder) SessionByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionByID", reflect.TypeOf((*MockSessions)(nil).SessionByID), arg0, arg1)
}

// SessionDelete mocks base method.
func (m *MockSessions) SessionDelete(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SessionDelete indicates an expected call of SessionDelete.
func (mr *MockSessionsMockRecorder) SessionDelete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionDelete", reflect.TypeOf((*MockSessions)(nil).SessionDelete), arg0, arg1)
}

// SessionSave mocks base method.
func (m *MockSessions) SessionSave(arg0 context.Context, arg1 app.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SessionSave", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SessionSave indicates an expected call of SessionSave.
func (mr *MockSessionsMockRecorder) SessionSave(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionSave", reflect.TypeOf((*MockSessions)(nil).SessionSave), arg0, arg1)
}

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
	isgomock struct{}
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// Subject mocks base method.
func (m *MockAuth) Subject(token string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subject", token)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subject indicates an expected call of Subject.
func (mr *MockAuthMockRecorder) Subject(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subject", reflect.TypeOf((*MockAuth)(nil).Subject), token)
}

// Token mocks base method.
func (m *MockAuth) Token(arg0 uuid.UUID) (*app.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token", arg0)
	ret0, _ := ret[0].(*app.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Token indicates an expected call of Token.
func (mr *MockAuthMockRecorder) Token(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockAuth)(nil).Token), arg0)
}

// MockID is a mock of ID interface.
type MockID struct {
	ctrl     *gomock.Controller
	recorder *MockIDMockRecorder
	isgomock struct{}
}

// MockIDMockRecorder is the mock recorder for MockID.
type MockIDMockRecorder struct {
	mock *MockID
}

// NewMockID creates a new mock instance.
func NewMockID(ctrl *gomock.Controller) *MockID {
	mock := &MockID{ctrl: ctrl}
	mock.recorder = &MockIDMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockID) EXPECT() *MockIDMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockID) New() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockIDMockRecorder) New() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockID)(nil).New))
}
